import os
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CURRENCY_SERVICE_URL = os.getenv('CURRENCY_SERVICE_URL', "http://localhost:5001")
DATA_SERVICE_URL = os.getenv('DATA_SERVICE_URL', "http://localhost:5002")
ROLE_SERVICE_URL = os.getenv('ROLE_SERVICE_URL', "http://localhost:5003")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class CurrencyStates(StatesGroup):
    waiting_for_currency_name = State()
    waiting_for_currency_rate = State()
    waiting_for_currency_to_delete = State()
    waiting_for_currency_to_update = State()
    waiting_for_new_rate = State()

class ConvertStates(StatesGroup):
    waiting_for_currency_to_convert = State()
    waiting_for_amount_to_convert = State()

async def check_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        response = requests.get(
            f"{ROLE_SERVICE_URL}/check_role",
            params={"user_id": user_id},
            timeout=3
        )
        return response.status_code == 200 and response.json().get('role') == 'admin'
    except requests.exceptions.RequestException:
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    menu_commands = [
        ("/start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        ("/get_currencies", "–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç"),
        ("/convert", "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"),
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É manage_currency —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if await check_admin(message.from_user.id):
        menu_commands.append(("/manage_currency", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏"))

    builder = ReplyKeyboardBuilder()
    for cmd, desc in menu_commands:
        builder.add(KeyboardButton(text=cmd))

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–∞–º–∏.",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /manage_currency
@dp.message(Command("manage_currency"))
async def cmd_manage_currency(message: types.Message):
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É"),
        KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É"),
        KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å")
    )
    builder.row(KeyboardButton(text="–û—Ç–º–µ–Ω–∞"))

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /set_role (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
@dp.message(Command("set_role"))
async def cmd_set_role(message: types.Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    args = message.text.split()
    if len(args) != 3 or args[2].lower() not in ['admin', 'user']:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_role <user_id> <admin|user>")
        return

    user_id = args[1]
    role = args[2].lower()

    try:
        response = requests.post(
            f"{ROLE_SERVICE_URL}/set_role",
            json={"user_id": user_id, "role": role},
            timeout=3
        )

        if response.status_code == 200:
            await message.answer(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ {role}")
        else:
            error = response.json().get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}")
    except requests.exceptions.RequestException:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å —Ä–æ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É")
async def add_currency_start(message: types.Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR):",
                         reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(CurrencyStates.waiting_for_currency_name)

@dp.message(CurrencyStates.waiting_for_currency_name)
async def process_currency_name(message: types.Message, state: FSMContext):
    currency = message.text.upper()

    response = requests.get(f"{DATA_SERVICE_URL}/currencies")
    if response.status_code == 200:
        currencies = [c['currency'] for c in response.json().get('currencies', [])]
        if currency in currencies:
            await message.answer(f"‚ùå –í–∞–ª—é—Ç–∞ {currency} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await state.clear()
            return

    await state.update_data(currency_name=currency)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å {currency} –∫ —Ä—É–±–ª—é:")
    await state.set_state(CurrencyStates.waiting_for_currency_rate)

@dp.message(CurrencyStates.waiting_for_currency_rate)
async def process_currency_rate(message: types.Message, state: FSMContext):
    try:
        rate = float(message.text.replace(',', '.'))
        data = await state.get_data()

        response = requests.post(
            f"{CURRENCY_SERVICE_URL}/load",
            json={"currency_name": data['currency_name'], "rate": rate},
            timeout=3
        )

        if response.status_code == 200:
            await message.answer(f"‚úÖ –í–∞–ª—é—Ç–∞ {data['currency_name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            error = response.json().get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    except requests.exceptions.RequestException:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤–∞–ª—é—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É")
async def delete_currency_start(message: types.Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    response = requests.get(f"{DATA_SERVICE_URL}/currencies")
    if response.status_code != 200:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç")
        return

    currencies = [c['currency'] for c in response.json().get('currencies', [])]
    if not currencies:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ({', '.join(currencies)}):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(CurrencyStates.waiting_for_currency_to_delete)

@dp.message(CurrencyStates.waiting_for_currency_to_delete)
async def process_delete_currency(message: types.Message, state: FSMContext):
    currency = message.text.upper()

    try:
        response = requests.post(
            f"{CURRENCY_SERVICE_URL}/delete",
            json={"currency_name": currency},
            timeout=3
        )

        if response.status_code == 200:
            await message.answer(f"‚úÖ –í–∞–ª—é—Ç–∞ {currency} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        elif response.status_code == 404:
            await message.answer(f"‚ùå –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    except requests.exceptions.RequestException:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤–∞–ª—é—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    await state.clear()

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞
@dp.message(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å")
async def update_currency_start(message: types.Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    response = requests.get(f"{DATA_SERVICE_URL}/currencies")
    if response.status_code != 200:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç")
        return

    currencies = [c['currency'] for c in response.json().get('currencies', [])]
    if not currencies:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        return

    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ({', '.join(currencies)}):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(CurrencyStates.waiting_for_currency_to_update)

@dp.message(CurrencyStates.waiting_for_currency_to_update)
async def process_currency_to_update(message: types.Message, state: FSMContext):
    currency = message.text.upper()
    await state.update_data(currency_name=currency)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –¥–ª—è {currency}:")
    await state.set_state(CurrencyStates.waiting_for_new_rate)

@dp.message(CurrencyStates.waiting_for_new_rate)
async def process_new_rate(message: types.Message, state: FSMContext):
    try:
        new_rate = float(message.text.replace(',', '.'))
        data = await state.get_data()

        response = requests.post(
            f"{CURRENCY_SERVICE_URL}/update_currency",
            json={"currency_name": data['currency_name'], "rate": new_rate},
            timeout=3
        )

        if response.status_code == 200:
            await message.answer(f"‚úÖ –ö—É—Ä—Å {data['currency_name']} –æ–±–Ω–æ–≤–ª–µ–Ω: 1 {data['currency_name']} = {new_rate} RUB")
        else:
            error = response.json().get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    except requests.exceptions.RequestException:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤–∞–ª—é—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    await state.clear()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç
@dp.message(Command("get_currencies"))
async def cmd_get_currencies(message: types.Message):
    try:
        response = requests.get(f"{DATA_SERVICE_URL}/currencies", timeout=3)

        if response.status_code == 200:
            currencies = response.json().get('currencies', [])
            if currencies:
                text = "üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n" + "\n".join(
                    [f"{c['currency']}: {c['rate']} RUB" for c in currencies]
                )
            else:
                text = "‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç"
        else:
            text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"

        await message.answer(text)
    except requests.exceptions.RequestException:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã
@dp.message(Command("convert"))
async def cmd_convert(message: types.Message, state: FSMContext):
    try:
        response = requests.get(f"{DATA_SERVICE_URL}/currencies", timeout=3)
        if response.status_code != 200:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç")
            return

        currencies = [c['currency'] for c in response.json().get('currencies', [])]
        if not currencies:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            return

        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã ({', '.join(currencies)}):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(ConvertStates.waiting_for_currency_to_convert)
    except requests.exceptions.RequestException:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@dp.message(ConvertStates.waiting_for_currency_to_convert)
async def process_currency_to_convert(message: types.Message, state: FSMContext):
    currency = message.text.upper()
    await state.update_data(currency=currency)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    await state.set_state(ConvertStates.waiting_for_amount_to_convert)

@dp.message(ConvertStates.waiting_for_amount_to_convert)
async def process_amount_to_convert(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        data = await state.get_data()

        response = requests.get(
            f"{DATA_SERVICE_URL}/convert",
            params={"currency": data['currency'], "amount": amount},
            timeout=3
        )

        if response.status_code == 200:
            result = response.json()
            await message.answer(
                f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
                f"{amount} {data['currency']} = {result['converted_amount']:.2f} RUB\n"
                f"–ö—É—Ä—Å: 1 {data['currency']} = {result['rate']} RUB"
            )
        else:
            error = response.json().get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    except requests.exceptions.RequestException:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    await state.clear()

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
@dp.message(lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_action(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())